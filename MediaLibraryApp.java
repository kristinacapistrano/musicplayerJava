package ser321.assign2.lindquis;import java.rmi.*;import javax.swing.*;import java.io.*;import java.nio.file.Paths;import java.nio.charset.Charset;import javax.sound.sampled.*;import java.beans.*;import java.net.*;import javax.swing.tree.*;import javax.swing.event.*;import javax.swing.text.html.*;import javax.swing.filechooser.*;import java.awt.event.*;import java.awt.*;import java.util.*;import java.lang.Runtime;import java.net.http.HttpClient;import java.net.http.HttpRequest;import java.net.http.HttpRequest.BodyPublishers;import java.net.http.HttpResponse;import java.net.http.HttpResponse.BodyHandlers;import java.net.URLConnection;import java.time.Duration;import org.json.JSONObject;/** * Copyright 2020 Tim Lindquist, * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *  * Purpose: MediaLibraryApp instructor sample for solving Spring 2020 ser321 assignments. * This problem provides for browsing and managing information about * music albums. It uses a Swing JTree, and JTextField controls to  * realize a GUI with a split pane. The left pane contains an expandable * JTree of the media library. * This program is a sample controller for the non-distributed version of * the system. * The right pane contains components that allow viewing, modifying and adding * albums, tracks, and corresponding files. * * @author Tim Lindquist (Tim.Linquist@asu.edu), *         Software Engineering, CIDSE, IAFSE, ASU Poly * @version January 2020 */public class MediaLibraryApp extends MediaLibraryGui implements							 TreeWillExpandListener,							 ActionListener,							 TreeSelectionListener {    private static final boolean debugOn = true;    private static String img = "https://lastfm.freetls.fastly.net/i/u/300x300/8dce63c224a643b78b39caeb27aadf8b.png";    private static final String pre = "http://ws.audioscrobbler.com/2.0/?method=album.getinfo&artist=";    private String url;    private boolean stopPlaying; //shared, but not synchronized with playing thread.    private MediaLibrary library;    private String lastFMKey;    private JSONObject ob; // contains the current searched album    private MusicLibrary x;        public MediaLibraryApp(String author, String authorKey,			   String hostId, String regPort) {	super(author);	this.lastFMKey = authorKey;	library = new MediaLibraryImpl();	stopPlaying = false;	for(int i=0; i<userMenuItems.length; i++){	    for(int j=0; j<userMenuItems[i].length; j++){		userMenuItems[i][j].addActionListener(this);	    }	}	searchJButt.addActionListener(this);	try{	    MusicLib ml ;	    MusicLibServer server ;	    server=(MusicLibServer)Naming.lookup(						 "rmi://"+hostId+":"+regPort+						 "/MusicLibraryServer");	    System.out.println("Client obtained remote object reference to" +			       " the Music Library Server at: \n" +			       "rmi://"+hostId+":"+regPort+"/MusicLibraryServer");	    tree.addTreeSelectionListener(this);	    rebuildTree();	}catch (Exception ex){	    JOptionPane.showMessageDialog(this,"Handling "+					  " constructor exception: " + ex.getMessage());	}	try{	    /*	     * display an image just to show how the album or artist image can be displayed in the	     * app's window. setAlbumImage is implemented by MediaLibraryGui class. Call it with a	     * string url to a png file as obtained from an album search.	     */	    setAlbumImage(img);	}catch(Exception ex){	    System.out.println("unable to open Cher png");	}	setVisible(true);    }    /**     * A method to facilite printing debugging messages during development, but which can be     * turned off as desired.     *     **/    private void debug(String message) {	if (debugOn)	    System.out.println("debug: "+message);    }    /**     * Create and initialize nodes in the JTree of the left pane.     * buildInitialTree is called by MediaLibraryGui to initialize the JTree.     * Classes that extend MediaLibraryGui should override this method to      * perform initialization actions specific to the extended class.     * The default functionality is to set base as the label of root.     * In your solution, you will probably want to initialize by deserializing     * your library and displaying the categories and subcategories in the     * tree.     * @param root Is the root node of the tree to be initialized.     * @param base Is the string that is the root node of the tree.     */    public void buildInitialTree(DefaultMutableTreeNode root, String base){	//set up the context and base name	try{	    root.setUserObject(base);	}catch (Exception ex){	    JOptionPane.showMessageDialog(this,"exception initial tree:"+ex);	    ex.printStackTrace();	}    }    /**     *     * method to build the JTree of music shown in the left panel of the UI. The     * field tree is a JTree as defined and initialized by MediaLibraryGui class.     * it is defined to be protected so it can be accessed by extending classes.     * This version of the method uses the music library to get the names of     * tracks. Your solutions will need to replace this structure with one that     * keeps information particular to both Album and Track (two classes Album.java,     * and Track.java). Your music library will store and provide access to Album     * and Track objects.     * This method is provided to demonstrate one way to add nodes to a JTree based     * on an underlying storage structure.     * See also the methods clearTree, valueChanged, and getSubLabelled defined in this class.     **/    public void rebuildTree(){	tree.removeTreeSelectionListener(this);	//tree.removeTreeWillExpandListener(this);	DefaultTreeModel model = (DefaultTreeModel)tree.getModel();	DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();	clearTree(root, model);	DefaultMutableTreeNode musicNode = new DefaultMutableTreeNode("Music");	model.insertNodeInto(musicNode, root, model.getChildCount(root));	// put nodes in the tree for all  registered with the library	String[] musicList = library.getTitles();	for (int i = 0; i<musicList.length; i++){	    MediaDescription aMD = library.get(musicList[i]);	    String aMTitle = aMD.title;	    //-----         debug("Adding song with title:"+aMD.title);	    DefaultMutableTreeNode toAdd = new DefaultMutableTreeNode(aMTitle);	    DefaultMutableTreeNode subNode = getSubLabelled(musicNode,aMD.album);	    if(subNode!=null){ // if album subnode already exists		//---------      debug("album exists: "+aMD.album);		//subNode.add(toAdd);		model.insertNodeInto(toAdd, subNode,				     model.getChildCount(subNode));	    }else{ // album node does not exist		DefaultMutableTreeNode anAlbumNode =		    new DefaultMutableTreeNode(aMD.album);		//--------     debug("no album, so add one with name: "+aMD.album);		//root.add(aCatNode);		model.insertNodeInto(anAlbumNode, musicNode,				     model.getChildCount(musicNode));		DefaultMutableTreeNode aSubCatNode = 		    new DefaultMutableTreeNode("aSubCat");		//--------     debug("adding subcat labelled: "+"aSubCat");		model.insertNodeInto(toAdd,anAlbumNode,				     model.getChildCount(anAlbumNode));	    }	}	// expand all the nodes in the JTree	for(int r =0; r < tree.getRowCount(); r++){	    tree.expandRow(r);	}	tree.addTreeSelectionListener(this);	//tree.addTreeWillExpandListener(this);	//setVisible(true);    }    //temporarily show the album that was searched. if refreshed or other action model will go    //back to the original playlist the musicplayer loaded with.     public void showSearched(){	tree.removeTreeSelectionListener(this);	DefaultTreeModel model = (DefaultTreeModel)tree.getModel();	DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();	clearTree(root, model);	DefaultMutableTreeNode musicNode = new DefaultMutableTreeNode("Music");	model.insertNodeInto(musicNode, root, model.getChildCount(root));	MusicLibrary _ml = new MusicLibrary();	Album al = new Album(ob);	int size = Integer.parseInt(_ml.size(ob));	String[] musicList = (_ml.getAllSongs(ob)).toArray(new String[size]);	System.out.println("music list size : " + musicList.length);	for (int i = 0; i<musicList.length; i++){	    String aMTitle = al.tracks.get(i);	    System.out.println(aMTitle);	    //-----         debug("Adding song with title:"+aMD.title);	    DefaultMutableTreeNode toAdd = new DefaultMutableTreeNode(aMTitle);	    DefaultMutableTreeNode subNode = getSubLabelled(musicNode,al.albumName);	    if(subNode!=null){ // if album subnode already exists	    	//---------      debug("album exists: "+aMD.album);	    	model.insertNodeInto(toAdd, subNode,	    			     model.getChildCount(subNode));	    }else{ // album node does not exist	    	DefaultMutableTreeNode anAlbumNode =	    	    new DefaultMutableTreeNode(al.albumName);	    	//--------     debug("no album, so add one with name: "+aMD.album);	    	model.insertNodeInto(anAlbumNode, musicNode,	    			     model.getChildCount(musicNode));	    	DefaultMutableTreeNode aSubCatNode = 	    	    new DefaultMutableTreeNode("aSubCat");	    	//--------     debug("adding subcat labelled: "+"aSubCat");	    	model.insertNodeInto(toAdd,anAlbumNode,	    			     model.getChildCount(anAlbumNode));	    }	}        	System.out.println("IMAGE >>>>>>" + img);	setAlbumImage(al.image);	// expand all the nodes in the JTree	for(int r =0; r < tree.getRowCount(); r++){	    tree.expandRow(r);	}	tree.addTreeSelectionListener(this);    }        public void addAlbum(){ //adding searched album	Album al = new Album(ob);	tree.removeTreeSelectionListener(this);	//tree.removeTreeWillExpandListener(this);	DefaultTreeModel model = (DefaultTreeModel)tree.getModel();	DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot(); // returns ROOT 	DefaultMutableTreeNode parent = (DefaultMutableTreeNode)root.getFirstChild(); //returns MUSIC 	MusicLibrary _ml = new MusicLibrary();	int size = Integer.parseInt(_ml.size(ob));	String[] musicList = (_ml.getAllSongs(ob)).toArray(new String[size]);	System.out.println("music list size : " + musicList.length);	for (int i = 0; i<musicList.length; i++){	    String aMTitle = al.tracks.get(i);	    System.out.println(aMTitle);	    //-----         debug("Adding song with title:"+aMD.title);	    DefaultMutableTreeNode toAdd = new DefaultMutableTreeNode(aMTitle);	    DefaultMutableTreeNode subNode = getSubLabelled(parent,al.albumName);	    if(subNode!=null){ // if album subnode already exists	    	//---------      debug("album exists: "+aMD.album);	    	model.insertNodeInto(toAdd, subNode,	    			     model.getChildCount(subNode));	    }else{ // album node does not exist	    	DefaultMutableTreeNode anAlbumNode =	    	    new DefaultMutableTreeNode(al.albumName);	    	//--------     debug("no album, so add one with name: "+aMD.album);	    	model.insertNodeInto(anAlbumNode, parent,	    			     model.getChildCount(parent));	    	DefaultMutableTreeNode aSubCatNode = 	    	    new DefaultMutableTreeNode("aSubCat");	    	//--------     debug("adding subcat labelled: "+"aSubCat");	    	model.insertNodeInto(toAdd,anAlbumNode,	    			     model.getChildCount(anAlbumNode));	    }	}		try {	    x.saveFile(ob);	    	    	}catch (FileNotFoundException ee){	    System.out.println(ee);	}	// expand all the nodes in the JTree	for(int r =0; r < tree.getRowCount(); r++){	    tree.expandRow(r);	}	tree.addTreeSelectionListener(this);    }    public void removeAlbum(){	DefaultTreeModel model = (DefaultTreeModel)tree.getModel();	tree.addTreeSelectionListener(this);	DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)tree.getLastSelectedPathComponent();	if (selectedNode == null ) return;	else model.removeNodeFromParent(selectedNode);	//Object nodeInfo = selectedNode.getUserObject();    }    public void trackRemove(){	DefaultTreeModel model = (DefaultTreeModel)tree.getModel();	tree.addTreeSelectionListener(this);	DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)tree.getLastSelectedPathComponent();	System.out.println("selected node: " + selectedNode.toString());	DefaultMutableTreeNode selectedParent = (DefaultMutableTreeNode)selectedNode.getParent();	System.out.println("selectedParent : " + selectedParent.toString());	int index = selectedParent.getIndex(selectedNode);	System.out.println("index: " + index + " ...removed");	selectedNode.removeFromParent();	model.reload(selectedParent);    }    private void clearTree(DefaultMutableTreeNode root, DefaultTreeModel model){	try{	    DefaultMutableTreeNode next = null;	    int subs = model.getChildCount(root);	    for(int k=subs-1; k>=0; k--){		next = (DefaultMutableTreeNode)model.getChild(root,k);		debug("removing node labelled:"+(String)next.getUserObject());		model.removeNodeFromParent(next);	    }	}catch (Exception ex) {	    System.out.println("Exception while trying to clear tree:");	    ex.printStackTrace();	}    }    private DefaultMutableTreeNode getSubLabelled(DefaultMutableTreeNode root,						  String label){	DefaultMutableTreeNode ret = null;	DefaultMutableTreeNode next = null;	boolean found = false;	for(Enumeration<TreeNode> e = root.children();	    e.hasMoreElements();){	    next = (DefaultMutableTreeNode)e.nextElement();	    debug("sub with label: "+(String)next.getUserObject());	    if (((String)next.getUserObject()).equals(label)){		debug("found sub with label: "+label);		found = true;		break;	    }	}	if(found)	    ret = next;	else	    ret = null;	return (DefaultMutableTreeNode)ret;    }    public void treeWillCollapse(TreeExpansionEvent tee) {	debug("In treeWillCollapse with path: "+tee.getPath());	tree.setSelectionPath(tee.getPath());    }    public void treeWillExpand(TreeExpansionEvent tee) {	debug("In treeWillExpand with path: "+tee.getPath());    }    public void valueChanged(TreeSelectionEvent e) {	try{	    tree.removeTreeSelectionListener(this);	    DefaultMutableTreeNode node = (DefaultMutableTreeNode)		tree.getLastSelectedPathComponent();	    if(node!=null){		String nodeLabel = (String)node.getUserObject();		debug("In valueChanged. Selected node labelled: "+nodeLabel);		// is this a terminal node?		if(node.getChildCount()==0 &&		   (node != (DefaultMutableTreeNode)tree.getModel().getRoot())){		    MediaDescription md = library.get(nodeLabel);		    trackJTF.setText(nodeLabel);		    authorJTF.setText(md.author);		    albumJTF.setText(md.album);		    fileNameJTF.setText(md.fileName);		    rankJTF.setText(md.rank);		    timeJTF.setText(md.duration);		    summaryJTA.setText(md.summary);		    setAlbumImage(md.image);		}	    }	}catch (Exception ex){	    ex.printStackTrace();	}	tree.addTreeSelectionListener(this);    }    public void actionPerformed(ActionEvent e) {	tree.removeTreeSelectionListener(this);	if(e.getActionCommand().equals("Exit")) {	    System.exit(0);	}else if(e.getActionCommand().equals("Save")) {	    boolean savRes = true;	    //files are already saved as per add album	    	    System.out.println("Save "+((savRes)?"successful":"not implemented"));	}else if(e.getActionCommand().equals("Restore")) {	    boolean resRes = true;	    rebuildTree();	    System.out.println("Restore "+((resRes)?"successful":"not implemented"));	}else if(e.getActionCommand().equals("AlbumAdd")) {//-----------------------------------------	    //find a way to add the searched album to file and append the json file	    rebuildTree();	    addAlbum();	    //System.out.println("AlbumAdd not implemented");	}else if(e.getActionCommand().equals("TrackAdd")) {	    int typeInd = genreJCB.getSelectedIndex();	    MediaDescription aMD = new MediaDescription(trackJTF.getText().trim(),							authorJTF.getText().trim(),							albumJTF.getText().trim(),							fileNameJTF.getText().trim(),							rankJTF.getText().trim(),							timeJTF.getText().trim(),							summaryJTA.getText().trim(),"image");	    library.add(aMD);	    rebuildTree(); 	}else if(e.getActionCommand().equals("Search")) {	    String searchReqURL = pre+artistSearchJTF.getText().trim()+"&album="+albumSearchJTF.getText().trim()+		"&api_key="+lastFMKey+"&format=json";	    System.out.println("calling fetchAsyncURL with url: "+searchReqURL);	    String result = fetchURL(searchReqURL);	    System.out.println(".....CREATING FILE " );	    x = new MusicLibrary();	    ob = x.getFM(result); //returns a fm jsonobject	    showSearched();	}else if(e.getActionCommand().equals("Tree Refresh")) {	    MediaLibraryImpl l = new MediaLibraryImpl();	    //rebuildTree();	}else if(e.getActionCommand().equals("TrackRemove")) {	    trackRemove();	}else if(e.getActionCommand().equals("AlbumRemove")) {	    removeAlbum();	}else if(e.getActionCommand().equals("AlbumPlay") || e.getActionCommand().equals("TrackPlay")){	    try{		DefaultMutableTreeNode node = (DefaultMutableTreeNode)		    tree.getLastSelectedPathComponent();		if(node!=null){		    String nodeLabel = (String)node.getUserObject();		    MediaDescription md = library.get(nodeLabel);		    String fileName = md.fileName;		    String path = "file://"+System.getProperty("user.dir")+			"/MediaFiles/" + fileName;		    this.playMedia(path, md.title);		}	    }catch(Exception ex){		System.out.println("Execption trying to play media:");		ex.printStackTrace();	    }	}	tree.addTreeSelectionListener(this);    }    /**     *     * A method to do asynchronous url request printing the result to System.out     * @param aUrl the String indicating the query url for the lastFM api search     *     **/    public void fetchAsyncURL(String aUrl){	try{	    HttpClient client = HttpClient.newHttpClient();	    HttpRequest request = HttpRequest.newBuilder()		.uri(URI.create(aUrl))		.timeout(Duration.ofMinutes(1))		.build();	    client.sendAsync(request, BodyHandlers.ofString())		.thenApply(HttpResponse::body)		.thenAccept(System.out::println)		.join();	 	}catch(Exception ex){	    System.out.println("Exception in fetchAsyncUrl request: "+ex.getMessage());	}    }    /**     *     * a method to make a web request. Note that this method will block execution     * for up to 20 seconds while the request is being satisfied. Better to use a     * non-blocking request.     * @param aUrl the String indicating the query url for the lastFM api search     * @return the String result of the http request.     *     **/    public String fetchURL(String aUrl) {	StringBuilder sb = new StringBuilder();	URLConnection conn = null;	InputStreamReader in = null;	try {	    URL url = new URL(aUrl);	    conn = url.openConnection();	    if (conn != null)		conn.setReadTimeout(20 * 1000); // timeout in 20 seconds	    if (conn != null && conn.getInputStream() != null) {		in = new InputStreamReader(conn.getInputStream(),					   Charset.defaultCharset());		BufferedReader br = new BufferedReader(in);		if (br != null) {		    int ch;		    // read the next character until end of reader		    while ((ch = br.read()) != -1) {			sb.append((char)ch);		    }		    br.close();		}	    }	    in.close();	} catch (Exception ex) {	    System.out.println("Exception in url request:"+ ex.getMessage());	} 	return sb.toString();    }    public boolean sezToStop(){	return stopPlaying;    }    public static void main(String args[]) {	String name = "first.last";	String key = "use-your-last.fm-key-here";	String hostId = "hostId";	String regPort = "regPort";	if (args.length >= 2){	    //System.out.println("java -cp classes:lib/json.lib ser321.assign2.lindquist."+	    //                   "MediaLibraryApp \"Lindquist Music Library\" lastFM-Key");	    name = args[0];	    key = args[1];	    hostId =args[2];	    regPort =args[3];	    System.out.println("regport : " + regPort +			       " hostId: " + hostId);	}	try{	    //System.out.println("calling constructor name "+name);	    MediaLibraryApp mla = new MediaLibraryApp(name,key,						      "10.0.2.15","2020");	}catch (Exception ex){	    ex.printStackTrace();	}    }}